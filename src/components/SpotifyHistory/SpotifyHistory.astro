---
import { Track, PlayHistory } from "../../api/types";
import { getCurrentAndRecentTracks } from "../../api/api";
import SpotifyTrackCard from "./SpotifyTrackCard.astro";

const data = await getCurrentAndRecentTracks(10);

---
<style>
    h2 {
        color: var(--light-text-color);
        text-align: center;
        font-size: 1.8rem;
    }
    ul {
        /* Give some buffer space at either side */
        width: calc(100% - 16px);
        margin: 0 auto;

        list-style-type: none;
        display: flex;
        flex-direction: row;
        overflow: auto;
        white-space: norwap;

        padding-left: unset;
    }

    .horizontal-scroll {
        scroll-behavior: smooth;
        user-select: none;
        cursor: grab;
        -webkit-overflow-scrolling: touch;
    }

    .horizontal-scroll.dragging {
        cursor: grabbing;
    }
</style>

<script>
    const list = document.getElementById("spotify-history")!;
    let isDown = false;
    let startX: number;
    let scrollLeft: number;

    list.addEventListener("mousedown", (e) => {
        isDown = true;
        list.classList.add("dragging");
        startX = e.pageX - list.offsetLeft;
        scrollLeft = list.scrollLeft;
    });

    list.addEventListener("mouseleave", () => {
        isDown = false;
        list.classList.remove("dragging");
    });

    list.addEventListener("mouseup", () => {
        isDown = false;
        list.classList.remove("dragging");
    });

    list.addEventListener("mousemove", (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - list.offsetLeft;
        const walk = (x - startX) * 1.5; // adjust multiplier as needed
        list.scrollLeft = scrollLeft - walk;
    });

    // Touch support
    list.addEventListener("touchstart", (e) => {
        isDown = true;
        startX = e.touches[0].pageX - list.offsetLeft;
        scrollLeft = list.scrollLeft;
    });

    list.addEventListener("touchmove", (e) => {
        if (!isDown) return;
        const x = e.touches[0].pageX - list.offsetLeft;
        const walk = (x - startX) * 1.5;
        list.scrollLeft = scrollLeft - walk;
    });

    list.addEventListener("touchend", () => {
        isDown = false;
    });
</script>

<h2>What I've been listening to</h2>
<ul id="spotify-history" class="horizontal-scroll">
    {
        data.map(({ playedAt, track }, idx) => (
            <li>
                <SpotifyTrackCard key={idx} track={track} playedAt={playedAt} />
            </li>
        ))
    }
</ul>
